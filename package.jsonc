{
  "name": "nest-admin",
  "version": "2.0.0",
  "private": true,
  "packageManager": "pnpm@9.1.0",
  "license": "MIT",
  "engines": {
    "node": ">=20.0.0",
    "pnpm": ">=9"
  },
  "scripts": {
    // 在安装依赖完成后执行，调用 `npm run gen-env-types` 生成环境类型文件
    "postinstall": "npm run gen-env-types",
    // 在构建项目之前执行，使用 `rimraf` 工具删除 `dist` 目录，确保构建的是最新代码
    "prebuild": "rimraf dist",
    // 构建项目
    "build": "nest build",
    "dev": "npm run start",
    "dev:debug": "npm run start:debug",
    "repl": "npm run start -- --entryFile repl",
    // 打包项目，先删除 `out` 目录，再构建项目，然后使用 `ncc` 工具对 `dist/main.js` 进行打包，输出到 `out` 目录，最后给 `out/index.js` 添加可执行权限
    // pnpm i @vercel/ncc -D
    "bundle": "rimraf out && npm run build && ncc build dist/main.js -o out -m -t && chmod +x out/index.js",
    // 启动项目并监听文件变化，`--path tsconfig.json` 指定配置文件路径
    "start": "cross-env NODE_ENV=development nest start -w --path tsconfig.json",
    // 在开发环境下启动应用并开启调试模式
    "start:debug": "cross-env NODE_ENV=development nest start --debug --watch",
    "start:prod": "cross-env NODE_ENV=production node dist/main",
    // 以生产环境使用 `pm2-runtime` 启动项目
    "prod": "cross-env NODE_ENV=production pm2-runtime start ecosystem.config.js",
    // 以生产环境使用 `pm2` 重启项目
    "prod:pm2": "cross-env NODE_ENV=production pm2 restart ecosystem.config.js",
    // 使用 `pm2` 停止项目
    "prod:stop": "pm2 stop ecosystem.config.js",
    // 以调试模式启动生产环境
    "prod:debug": "cross-env NODE_ENV=production nest start --debug --watch",
    // 运行代码检查，使用 `eslint` 对项目代码进行检查
    "lint": "eslint .",
    // 自动修复代码检查中的问题，使用 `eslint` 对项目代码进行检查并尝试自动修复
    "lint:fix": "eslint . --fix",
    // 运行测试，使用 `jest` 运行项目的测试用例
    "test": "jest",
    // 以监听模式运行测试
    "test:watch": "jest --watch",
    // 生成项目文档，使用 `compodoc` 工具 根据配置生成项目文档并启动服务
    // -p tsconfig.json：指定 TypeScript 配置文件 -s：启动静态服务器并实时预览文档
    "doc": "compodoc -p tsconfig.json -s",
    // 生成环境类型文件 `|| true` 表示即使脚本执行失败也继续执行后续命令
    "gen-env-types": "npx tsx scripts/genEnvTypes.ts || true",
    // typeorm-ts-node-esm：TypeORM 的命令行工具，支持直接运行 TypeScript 文件（无需编译）
    // 这个脚本本身不执行具体操作，而是作为基础命令，需要搭配其他 TypeORM 子命令使用
    // -d 是 --dataSource 的缩写，用于指定 TypeORM 的数据源配置文件
    // 配置文件: 指定 数据库连接参数 和 实体类（对应数据库表）和迁移文件的位置
    "typeorm": "cross-env NODE_ENV=development typeorm-ts-node-esm -d ./dist/config/database.config.js",
    // 创建数据库迁移文件，文件存放在 `./src/migrations/initData` 目录
    "migration:create": "npm run typeorm migration:create ./src/migrations/initData",
    // 生成数据库迁移文件，文件名包含当前项目版本号，文件存放在 `./src/migrations` 目录
    "migration:generate": "npm run typeorm migration:generate ./src/migrations/update-table_$(echo $npm_package_version | sed 's/\\./_/g')",
    // 运行数据库迁移，调用 `npm run typeorm` 命令执行数据库迁移操作
    "migration:run": "npm run typeorm -- migration:run",
    // 回滚数据库迁移，调用 `npm run typeorm` 命令回滚最后一次数据库迁移操作
    "migration:revert": "npm run typeorm -- migration:revert",
    "cleanlog": "rimraf logs",
    // 构建并启动 Docker 容器
    "docker:build:dev": "docker compose --env-file .env --env-file .env.development up --build",
    "docker:build": "docker compose --env-file .env --env-file .env.production up --build",
    // 使用 --no-build 参数时，Docker Compose 不会进行本地镜像构建。
    // 当本地没有所需镜像时，它会尝试从镜像仓库拉取镜像。若拉取成功则正常启动容器，拉取失败则启动容器的操作会失败
    "docker:up": "docker compose --env-file .env --env-file .env.production up -d --no-build",
    // -f 是 --file 的缩写  指定只使用 docker-compose.prod.yml 配置文件
    // -d 是 --detach 的缩写，该参数用于让 Docker Compose 在后台运行容器。当你使用 -d 参数时，命令执行后不会阻塞终端，你可以继续在终端中执行其他命令
    // --pull=always 该参数指定在启动容器之前，总是尝试拉取最新的镜像
    "docker:prod:up": "docker compose -f docker-compose.prod.yml --env-file .env --env-file .env.production up -d --pull=always",
    // 停止并删除 Docker Compose 文件中定义的所有服务的容器和网络
    // 默认不删除镜像和卷，主要清理容器和网络资源
    "docker:down": "docker compose --env-file .env --env-file .env.production down",
    // 停止、移除 nest-admin-server 容器，并删除对应的镜像，不会影响其他服务的容器和镜像
    "docker:rmi": "docker compose --env-file .env --env-file .env.production stop nest-admin-server && docker container rm nest-admin-server && docker rmi nest-admin-server",
    // 实时查看由 Docker Compose 管理的多容器应用的日志输出(控制台) -f = --follow
    "docker:logs": "docker compose --env-file .env --env-file .env.production logs -f"
  },
  "pnpm": {
    "peerDependencyRules": {
      "allowedVersions": {}
    }
  },
  "simple-git-hooks": {
    "pre-commit": "pnpm lint-staged"
  },
  "lint-staged": {
    "*": "eslint --fix"
  }
}